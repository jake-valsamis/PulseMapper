
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/Loss.ipynb
import torch
import numpy as np
from functools import partial
import torch.nn as nn


import torch
import torch.nn.functional as F
from torch.autograd import Variable
import numpy as np
from math import exp

####  ©nandinee   

from skimage import filters   





def gaussian(window_size, sigma):
    gauss = torch.Tensor([exp(-(x - window_size//2)**2/float(2*sigma**2)) for x in range(window_size)])
    return gauss/gauss.sum()

def create_window(window_size, channel):
    _1D_window = gaussian(window_size, 1.5).unsqueeze(1)
    _2D_window = _1D_window.mm(_1D_window.t()).float().unsqueeze(0).unsqueeze(0)
    window = Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())
    return window

def _ssim(img1, img2, window, window_size, channel, size_average = True):
    mu1 = F.conv2d(img1, window, padding = window_size//2, groups = channel)
    mu2 = F.conv2d(img2, window, padding = window_size//2, groups = channel)

    mu1_sq = mu1.pow(2)
    mu2_sq = mu2.pow(2)
    mu1_mu2 = mu1*mu2

    sigma1_sq = F.conv2d(img1*img1, window, padding = window_size//2, groups = channel) - mu1_sq
    sigma2_sq = F.conv2d(img2*img2, window, padding = window_size//2, groups = channel) - mu2_sq
    sigma12 = F.conv2d(img1*img2, window, padding = window_size//2, groups = channel) - mu1_mu2

    C1 = 0.01**2
    C2 = 0.03**2

    ssim_map = ((2*mu1_mu2 + C1)*(2*sigma12 + C2))/((mu1_sq + mu2_sq + C1)*(sigma1_sq + sigma2_sq + C2))

    if size_average:
        return ssim_map.mean()
    else:
        return ssim_map.mean(1).mean(1).mean(1)

class SSIM(torch.nn.Module):
    def __init__(self, window_size = 11, size_average = True):
        super(SSIM, self).__init__()
        self.window_size = window_size
        self.size_average = size_average
        self.channel = 1
        self.window = create_window(window_size, self.channel)

    def forward(self, img1, img2):
        (_, channel, _, _) = img1.size()

        if channel == self.channel and self.window.data.type() == img1.data.type():
            window = self.window
        else:
            window = create_window(self.window_size, channel)

            if img1.is_cuda:
                window = window.cuda(img1.get_device())
            window = window.type_as(img1)

            self.window = window
            self.channel = channel


        return _ssim(img1, img2, window, self.window_size, channel, self.size_average)

def ssim(img1, img2, window_size = 11, size_average = True):
    (_, channel, _, _) = img1.size()
    window = create_window(window_size, channel)

    if img1.is_cuda:
        window = window.cuda(img1.get_device())
    window = window.type_as(img1)

    return _ssim(img1, img2, window, window_size, channel, size_average)


class WeightedMSELoss(nn.Module):
    def forward(self, inp, target, gamma=2):
        assert inp.shape == target.shape, f"Loss shape mismatch: {inp.shape} != {target.shape}"
        ret = (inp - target) ** 2
        ret *= torch.abs(target)**gamma
        ret = torch.mean(ret)
        return ret

class WeightedMSELossByR2(nn.Module):
    """
    Note: This channel assumes that the loss is in the last channel and the targets of choice are before that.
    E.g. Three output channels: ['rms', 'pe1', 'r2'].  You will only calculate the loss based on the first two
    channels and disregard the prediction in the r2 channel

    """
    def forward(self, inp, target, gamma=2, rho = 1):
        assert inp.shape == target.shape, f"Loss shape mismatch: {inp.shape} != {target.shape}"
        inp_ch, targ_ch = inp[:,:-1,...], target[:,:-1,...]

        ret = (inp_ch - targ_ch) ** 2
        ret *= torch.abs(targ_ch)**gamma
        ret *= torch.abs(target[:,-1:,...])**rho
        ret = torch.mean(ret)
        return ret
    
    
    

####  ©nandinee    
class BinaryWindowMSE(nn.Module):
    def forward(self, inp, target, pos_weight=0.8):
        assert inp.shape == target.shape, f"Loss shape mismatch: {inp.shape} != {target.shape}"
        ret = (inp - target) ** 2
        pos_window = torch.gt(torch.abs(target), 0)
        neg_window = torch.le(torch.abs(target), 0)
        window = pos_weight * pos_window + (1-pos_weight) *neg_window
        ret *= window
        ret = torch.mean(ret)
        return ret
    



class BinaryWindowMSE_pos2_neg1(nn.Module):
    def forward(self, inp, target, pos_weight=2, neg_weight=1):
        assert inp.shape == target.shape, f"Loss shape mismatch: {inp.shape} != {target.shape}"
        ret = (inp - target) ** 2
        pos_window = torch.gt(torch.abs(target), 0)
        neg_window = torch.le(torch.abs(target), 0)
        window = pos_weight * pos_window +  neg_weight*neg_window
        ret *= window
        ret = torch.mean(ret)
        return ret
        
class BinaryWindowMSE_pos5_neg1(nn.Module):
    def forward(self, inp, target, pos_weight=5, neg_weight=1):
        assert inp.shape == target.shape, f"Loss shape mismatch: {inp.shape} != {target.shape}"
        ret = (inp - target) ** 2
        pos_window = torch.gt(torch.abs(target), 0)
        neg_window = torch.le(torch.abs(target), 0)
        window = pos_weight * pos_window +  neg_weight*neg_window
        ret *= window
        ret = torch.mean(ret)
        return ret
        
class BinaryWindowMSE_pos2_negp5(nn.Module):
    def forward(self, inp, target, pos_weight=2, neg_weight=0.5):
        assert inp.shape == target.shape, f"Loss shape mismatch: {inp.shape} != {target.shape}"
        ret = (inp - target) ** 2
        pos_window = torch.gt(torch.abs(target), 0)
        neg_window = torch.le(torch.abs(target), 0)
        window = pos_weight * pos_window +  neg_weight*neg_window
        ret *= window
        ret = torch.mean(ret)
        return ret
        

class BinaryWindowMSE_pos10_neg1(nn.Module):
    def forward(self, inp, target, pos_weight=10, neg_weight=1):
        assert inp.shape == target.shape, f"Loss shape mismatch: {inp.shape} != {target.shape}"
        ret = (inp - target) ** 2
        pos_window = torch.gt(torch.abs(target), 0)
        neg_window = torch.le(torch.abs(target), 0)
        window = pos_weight * pos_window +  neg_weight*neg_window
        ret *= window
        ret = torch.mean(ret)
        return ret
            
####  ©nandinee    
# class WeightedBackgroundMSE(nn.Module):
#     def forward(self, inp, target, pos_weight=0.8):
#         assert inp.shape == target.shape, f"Loss shape mismatch: {inp.shape} != {target.shape}"
#         ret = (inp - target) ** 2
#         data = target.cpu().numpy()
#         background= torch.zeros_like(target)
#         foreground= torch.zeros_like(target)
#         t =data.shape
#         print(t)
#         for i in range(data.shape[0]):
#             for j in range(data.shape[1]):
#                 val = filters.threshold_otsu(data[i,j,:,:])
#                 background[i,j,:,:] = torch.le(target[i,j,:,:], val)
#                 foreground[i,j,:,:] = torch.gt(target[i,j,:,:], val)

#         window = pos_weight * foreground + (1-pos_weight) * background
#         ret *= window
#         ret = torch.mean(ret)
#         return ret