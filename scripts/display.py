
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/Display Volumetric Data.ipynb
from bokeh.plotting import figure, output_file, show
from bokeh.layouts import column, row, gridplot
from bokeh.models import Slider, ColumnDataSource
from bokeh.io import show, output_notebook
from functools import partial
import torch
import numpy as np

#Note, should probably use gridplot instead of rows and columns and generalize beyond MRI
def bkapp(doc, image):
    """ Explore planes of an volumetric image in space and time.
    Note: images are expected in the shape (time, slices, channels, height, width) as they more
    closely resemble what we will be inputting to deep learning models
    """

    #if there is no time componenet, add it in
    if len(image.shape)==4: image=image[None, ...]
    timepoints, num_img, ch, h, w = image.shape

    planes = ['Transverse', 'Saggital', 'Coronal']
    dim_lengths = [num_img, h, w]
    data = {}
    source = ColumnDataSource(data = {})
    plots= {name:figure(title = name) for name in planes}
    for name, plot in plots.items():
        letter = name[0].lower()
        plot.image(image=f'{letter}_image', x=0, y=0, dw=10, dh=10, source = source)

    def update(attr, old, new):
        t_plane, s_plane, c_plane = [sliders[s].value for s in planes]
        t = 0 if timepoints==1 else slider_time.value
        new_data = {'t_image': [image[t, t_plane,0,...]],
                    's_image': [image[t, :,0,s_plane,:]],
                    'c_image': [image[t, :,0,:,c_plane]]}
        source.data = new_data


    sliders = {name:Slider(start=0, end=length-1, step = 1, value = 0) for
              name, length in zip(planes, dim_lengths)}
    for slider in sliders.values():
        slider.on_change('value', update)
    if timepoints>1:
        slider_time = Slider(start=0, end=timepoints-1, step=1, value=0)
        slider_time.on_change('value', update)


    update(None, None, None)
    rows = [] if timepoints==1 else [row(slider_time)]
    rows.append(row(*[column(plots[plane], sliders[plane]) for plane in planes]))
    doc.add_root(column(*rows))

def display_volume(img, notebook="localhost:8888"):
    """Expects an input of shape: timepoints, num_img, ch, h, w = image.shape"""
    if isinstance(img, torch.Tensor):
        if img.device.type=='cuda': show(partial(bkapp, image=np.array(img.cpu().detach())), notebook_url= notebook)
        else:                       show(partial(bkapp, image=np.array(img)), notebook_url= notebook)
    else: show(partial(bkapp, image=img), notebook_url= notebook)