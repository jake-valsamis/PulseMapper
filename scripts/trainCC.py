
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/Trainer.ipynb
"""Note: there is an issue with torchvision's import of Pillow.  If you have an older version of torchvision
or a new version of pillow (>7), and cannot change either, you need to include the fix below"""
import PIL
PIL.PILLOW_VERSION = PIL.__version__

import path
import torch
import torchvision
from functools import partial

from dataloader import *
from models import *
from opt import *
from learner import *
from data_augmentation import *
from display import display_volume

def mean(pred, yb): return pred.mean().item()

root_path      = Path('PulseMapper')
img_folder     = 'Images MC'
gt_folder      = 'Ground Truth'
img_components = ['std', 'mean', 'std']
gt_components  = ['rms']
extensions     = {'npy'}
img_tfms       = ToTensor()
bs             = 16
lr             = 1e-3
model          = DynamicResnet34Unet(len(img_components), 1, torchvision.models.resnet34(pretrained=True))
opt_func       = lamb_opt
loss_func      = torch.nn.MSELoss()

#model = torch.load(root_path/'unet_base')
#model=nn.Sequential(model, nn.Conv2d(3,1,1))
lr_sched=combine_scheds([0.4,0.6],[sched_cos(lr*0.3,lr*0.6),sched_cos(lr*0.6,lr*0.2)])

tfms=[(rotate_batch, 1., {'degrees':(-20,20)}),
      (scale_batch, 0.2, {'x_mag':(0.8, 1.2)}),
      (skew_batch, 0.4,{'mag':(-0.05,0.05)}),
      (reflect_batch, 0.5, {'mirror_h':True}),
      (reflect_batch, 0.5, {'mirror_v':True}),
      (translate_batch, 0.3, {'x_mag':(-0.1,0.1), 'y_mag':(-0.1,0.1)}),
     ]

cbs = [ToDeviceCallback(torch.device('cuda')),
       AvgStatsCallback([mean]),
       ParamScheduler('lr',lr_sched),
       BatchTransformCallback(tfms=tfms),
       #NormalizeBatchCallback(norm_x=True),
      ]

cbfs = [ToFloatCallback,
        Recorder,
        #StandardizeBatchCallback,
       ] #Printer

# load the model


il = MRIImageList.from_files(root_path/img_folder, img_components, extensions, img_tfms=img_tfms)
sd = SplitData.split_by_rdn_user(il, 0.7)
ll = label_by_function(sd, gt_components, relative_labeller, gt_folder, img_tfms)
data = ll.to_databunch(16)
learn = Learner(model, data, loss_func=loss_func, opt_func=opt_func, cbs=cbs, cbfs=cbfs)

#learn.fit(10, cbs=LR_Find())
learn.fit(10)

if __name__ is '__main__':
    print('Unit test')